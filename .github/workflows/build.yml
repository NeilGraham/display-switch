name: Build Release

on:
  push:
    branches: [ "main", "master" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   artifact_name: display-switch
          #   asset_name: display-switch-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: display-switch.exe
            asset_name: display-switch-windows-x86_64.exe
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   artifact_name: display-switch
          #   asset_name: display-switch-macos-x86_64
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   artifact_name: display-switch
          #   asset_name: display-switch-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    # - name: Install Linux dependencies
    #   if: matrix.os == 'ubuntu-latest'
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y libx11-dev libxrandr-dev

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Rename artifact
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
        else
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 